package com.dev.cloud.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.dev.cloud.dao.itemRepository;
import com.dev.cloud.utill.FileService;
import com.dev.cloud.vo.Item;
import com.dev.cloud.vo.MTI;
import com.dev.cloud.vo.Patent;

@Controller
@RequestMapping("/item")
public class ItemController {
	
	final String uploadPath = "/FileTest";
	
	@Autowired
	itemRepository repo;
	
	
	@RequestMapping(value = "/goItemUpdate", method = RequestMethod.GET)
	public String goItemUpdate() {
		
		return "/item/item_update";
	}
	
	@RequestMapping(value = "/goItemDetail", method = RequestMethod.GET)
	public String goItemDetail(int itemNum,Model model) {
		System.out.println("51==>"+itemNum);
		Item item = repo.goItemDetail(itemNum);
		
		
		model.addAttribute("item",item);
		
		return "/item/item_Detail";
	}
	
	@RequestMapping(value = "/goItemWrite", method = RequestMethod.GET)
	public String goItemWrite(Model model) {
		SimpleDateFormat format = new SimpleDateFormat ( "yyyy-MM-dd (E) ");
		
		Calendar time = Calendar.getInstance();
		
		String times = format.format(time.getTime());
		
		model.addAttribute("time", times);
		return "/item/item_write";
	}
	
	@RequestMapping(value = "/goItemUpdateProcess", method = RequestMethod.POST)
	public String goItemUpdateProcess() {
		
		return "redirect:/";
	}
	@RequestMapping(value = "/goItemWriteProcess", method = RequestMethod.POST)
	public String goItemWriteProcess(MultipartFile upload,MultipartFile upload1,Item item, HttpSession session) {
		String memberId= (String) session.getAttribute("loginId");
		item.setMemberId(memberId);
		System.out.println("item==>"+item);
		
		try {
			String itemImage = upload.getOriginalFilename();
			String saveitemImage = FileService.saveFile(upload, uploadPath);
			String documentFilename = upload1.getOriginalFilename();
			String saveDocumentFilename = FileService.saveFile(upload1, uploadPath);
			item.setItemImagename(itemImage);
			item.setSaveItemImage(saveitemImage);	
			item.setDocumentFilename(documentFilename);
			item.setSaveDocumentFilename(saveDocumentFilename);
		} catch (IllegalStateException e) {
			
			e.printStackTrace();
		}

		int result = repo.insertItem(item);
		try{
		if(result==1){
			return "redirect:/member/goMypage";
		}else{
			return "redirect:/item/goItemWrite";
		}
		}catch (Exception e) {
			e.printStackTrace();
			return "redirect:/goItemWrite";
		}
	}
	
	@RequestMapping(value = "/fileTest", method = RequestMethod.POST)
	public String fileTest(MultipartFile upload) {
		
		
		return "home";
	}
	
	@RequestMapping(value = "/download", method = RequestMethod.GET)
	public void download(HttpServletResponse response) {
		String name ="";
		try {
			name="메모.txt";
			name=URLEncoder.encode(name, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			
			e1.printStackTrace();
		}
		//응답 형식 바꾸고, 다운로드 파일 이름 지정
		response.setHeader("Content-Disposition", "attachment;filename="+name);
		
		//어디서 가져오고 어디로 보내는지 정하기
		File file = new File("D:/3DP/메모.txt");
		
		try {
			ServletOutputStream sos = response.getOutputStream();
			FileCopyUtils.copy(new FileInputStream(file), sos);
		} catch (Exception e) {
			
			e.printStackTrace();
		}

	}
	
	
}
